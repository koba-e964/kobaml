let id x = x;;
let not x = if x then false else true;;
let const x y = x;;
let flip f x y = f y x;;
let compose f g x = f (g x);;

let fst p = match p with (x, y) -> x;;
let snd p = match p with (x, y) -> y;;

let rec map f ls = match ls with
   | [] -> []
   | x ::  xs -> f x :: map f xs;;
let rec foldl op e ls = match ls with 
   | [] -> e
   | x :: xs -> foldl op (op e x) xs;;
let rec foldr op e ls = match ls with
   | [] -> e
   | x :: xs -> op x (foldr op e xs);;

let head ls = match ls with
   | x :: xs -> x;;
let tail ls = match ls with
   | x :: xs -> xs;;

let rec last ls = match ls with
    | x :: [] -> x 
    | x :: xs -> last xs;;
let rec append ls1 ls2 = match ls1 with
    | [] -> ls2
    | x :: xs -> x :: append xs ls2;;
let concat = foldl append [];;
let reverse ls =
    let rec sub ls acc = match ls with
        | [] -> acc
        | x :: xs -> sub xs (x :: acc)
      in sub ls [];;

let null ls = match ls with
    | [] -> true 
    | x -> false;;
let length ls = 
    let rec sub ls acc = match ls with
        | [] -> acc
        | x :: xs -> sub xs (1 + acc)
      in sub ls 0;;

let intersperse sep ls = match ls with
    | [] -> []
    | x :: xs -> let rec sub ps = match ps with
        |[] -> []
        | q :: qs -> sep :: q :: sub qs
      in x :: sub xs;;
let rec and_all bs = match bs with
    | [] -> true
    | x :: xs -> x && and_all bs;;
let rec filter p ls = match ls with
    | [] -> []
    | x :: xs -> let r = filter p xs in
      if p x then x :: r else r;;
let all p ls = and_all (map p ls);;
let rec iterate f x = x :: iterate f (f x);;
let repeat x = iterate id x;;
let rec replicate n x = match n with 0 -> []
    | n -> x :: replicate (n-1) x;;
let rec take n ls = match ls with
    | [] -> []
    | x :: xs -> if n <= 0 then [] else x :: take (n-1) xs;;
let rec drop n ls = match ls with
    | [] -> []
    | x :: xs -> if n <= 0 then x :: xs else drop (n-1) xs;;
let split_at n ls = (take n ls, drop n ls);;
let nth ind ls = head (drop ind ls);;
let rec take_while p ls = match ls with
    | [] -> []
    | x :: xs -> if p x then x :: take_while p xs else [];;
let rec drop_while p ls = match ls with
    | [] -> []
    | x :: xs -> if p x then drop_while p xs else x :: xs;;
let rec elem eq e ls = match ls with
    | [] -> false
    | x :: xs -> if eq e x then true else elem eq e xs;;
let rec zip ls1 ls2 = match ls1 with
    | [] -> []
    | x :: xs -> match ls2 with
        | y :: ys -> (x, y) :: zip xs ys
        | [] -> [];;
let rec zip_with op ls1 ls2 = match ls1 with
    | [] -> []
    | x :: xs -> match ls2 with
        | y :: ys -> op x y :: zip_with op xs ys
        | [] -> [];;
